The main goal of this lab is to implement a simple, memory-based, version of the Vector Space Model for Information Retrieval, using the Python language. Your application should take as input a file containing several textual documents, one document per line.  The documents should be read from disc and indexed into memory. Once the documents are stored, the application should read a set of keywords from stdin and use it as a query over the indexed documents. The documents should be presented ordered according to their similarity to the query.
Implement a function that reads a file from disc (as described above) and creates an in-memory inverted index of its contents.  The efficient construction of disk-based inverted indexes  will  be  covered  later  on  the  PRI  course  and,  for  now,  you  should  implement  a simple in-memory data structure.
The inverted index essentially corresponds to a dictionary that contains, for each term, the documents where it occurs and the corresponding document frequency. The following figure schematically illustrates an inverted index created over a collection of four documents. The figure shows each term, from the vocabulary used in the collection, in association to the documents where the term occurs, and together with the occurrence frequency.
If needed,  change your indexing function so that these values can be easily obtained (e.g., you can consider indexing the vocabulary used in the document collection, associating each term to the corresponding IDF score, separately from the list that contains the documents where the term occurs, together with the corresponding frequency).
